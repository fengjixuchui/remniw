.text
.globl apply
.type apply, @function
apply:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
.L.entry_140736838400752:
movq %rdi, -16(%rbp)
movq %rsi, -8(%rbp)
movq -16(%rbp), %r15
movq -8(%rbp), %r14
movq %r14, %rdi
callq *%r15
movq %rax, %rax
movq %rbp, %rsp
popq %rbp
retq

.text
.globl fib
.type fib, @function
fib:
pushq %rbp
movq %rsp, %rbp
subq $16, %rsp
.L.entry_140736838376368:
movq %rdi, -8(%rbp)
movq -8(%rbp), %r15
cmpq $1, %r15
jle .L.if.else_140736838372592
.L.if.then_140736838372512:
movq -8(%rbp), %r14
movq $1, %r15
subq %r14, %r15
movq %r15, %rdi
callq fib
movq -8(%rbp), %r14
movq $2, %r15
subq %r14, %r15
movq %r15, %rdi
callq fib
addq %rax, %rax
movq %rax, -16(%rbp)
jmp .L.if.end_140736838405872
.L.if.else_140736838372592:
movq $1,-16(%rbp)
jmp .L.if.end_140736838405872
.L.if.end_140736838405872:
movq -16(%rbp), %r14
movq %r14, %rax
movq %rbp, %rsp
popq %rbp
retq

.text
.globl main
.type main, @function
main:
pushq %rbp
movq %rsp, %rbp
subq $0, %rsp
.L.entry_140736838407568:
movq $.L.fmtstr.1, %rdi
movq $.L.fib, %rdi
movq $5, %rsi
callq apply
movq %rax, %rsi
callq printf
movq $0, %rax
movq %rbp, %rsp
popq %rbp
retq

.L.fmtstr.1:
.asciz "%lli\0A"
.L.fmtstr:
.asciz "%lli"
